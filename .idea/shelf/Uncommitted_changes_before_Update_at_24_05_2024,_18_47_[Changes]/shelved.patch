Index: .github/workflows/python-tests.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>on:\n  push:\n  schedule: \n    - cron: '0 * * * *'\n\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n\njobs:\n\n  test:\n    runs-on: ubuntu-latest\n    name: Запуск тестов\n    steps:\n      - name: Install Selenium\n        run: pip install selenium\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: setup python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.12\"\n      - name: Install Chrome\n        run: sudo apt-get install google-chrome-stable\n      - name: install dependencies\n        run: pip install -r requirements.txt\n      - name: Download all workflow run artifact\n        uses: actions/download-artifact@v3\n      - name: Cleanup old artifacts\n        run: |\n          rm -rf allure-results/*\n      - name: Run tests\n        run: pytest tests/test_title_city.py --alluredir=allure-results\n        continue-on-error: true\n      - name: Store allure results\n        uses: actions/upload-artifact@v3\n        with:\n          name: allure-results\n          path: allure-results\n          retention-days: 1\n\n\n  generate-report:\n    runs-on: ubuntu-latest\n    needs: test\n    name: Генерация отчета\n    steps:\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'microsoft'\n          java-version: '17'\n      - run: sudo wget https://github.com/allure-framework/allure2/releases/download/2.23.1/allure-2.23.1.tgz && sudo tar -zxvf allure-2.23.1.tgz -C /opt/ && sudo ln -s /opt/allure-2.23.1/bin/allure /usr/bin/allure\n      - name: Скачивание артефактов\n        uses: actions/download-artifact@v3\n      - run: allure generate -c allure-results -o _site\n      - name: Сохранение ссылки на отчет\n        run: |\n          echo \"REPORT_URL=https://nikita159821.github.io/Anrex/\" >> $GITHUB_OUTPUT\n      - name: Сохранение сгенерированного отчета\n        uses: actions/upload-artifact@v3\n        with:\n          name: _site\n          path:\n            _site\n          retention-days: 1\n\n\n  publish-report:\n    runs-on: ubuntu-latest\n    needs: generate-report\n    name: Публикация и отправка\n    steps:\n      - name: Download all workflow run artifacts\n        uses: actions/download-artifact@v3\n      - name: Upload Pages artifact\n        uses: actions/upload-pages-artifact@v2\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v1.2.9\n      - name: Update Report Number\n        id: update_report_number_2\n        env:\n          REPORT_NUMBER_2: ${{ secrets.REPORT_NUMBER_2 }}\n        run: |\n          REPORT_NUMBER_2=$((REPORT_NUMBER_2 + 1))\n          echo \"REPORT_NUMBER_2=$REPORT_NUMBER_2\" >> $GITHUB_OUTPUT\n          echo \"REPORT_NUMBER=$REPORT_NUMBER_2\" >> $GITHUB_STEP_SUMMARY\n          echo \"REPORT_NUMBER_2=$REPORT_NUMBER_2\" >> $GITHUB_ENV\n          echo \"Current REPORT_NUMBER_2 value before update: $REPORT_NUMBER_2\"\n\n          # Обновленное значение\n          REPORT_NUMBER_2=$((REPORT_NUMBER_2))\n          echo \"Current REPORT_NUMBER_2 value after update: $REPORT_NUMBER_2\"\n\n      - name: Setup GitHub CLI\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: pip install requests\n\n      - name: Update REPORT_NUMBER_2 Secret\n        env:\n          REPORT_NUMBER_2: ${{ steps.update_report_number_2.outputs.REPORT_NUMBER_2 }}\n          GITHUB_TOKEN: ${{ secrets.TOKEN }}\n        shell: python\n        run: |\n          import requests\n          import json\n          import os\n          \n          # Получение списка ключей шифрования\n          url = f\"https://api.github.com/repos/{os.environ['GITHUB_REPOSITORY']}/actions/secrets/public-keys\"\n          headers = {\n              'Accept': 'application/vnd.github+json',\n              'Authorization': f'Bearer {os.environ[\"GITHUB_TOKEN\"]}',\n              'X-GitHub-Api-Version': '2022-11-28'\n          }\n          response = requests.get(url, headers=headers)\n          \n          if response.status_code == 200:\n              keys = json.loads(response.text)['keys']\n              for key in keys:\n                  if key['name'] == 'REPORT_NUMBER_2':\n                      key_id = key['key_id']\n                      break\n              else:\n                  print(\"Ошибка: ключ шифрования для REPORT_NUMBER_2 не найден\")\n                  exit(1)\n          \n              # Получение существующего значения секрета\n              url = f\"https://api.github.com/repos/{os.environ['GITHUB_REPOSITORY']}/actions/secrets/REPORT_NUMBER_2\"\n              response = requests.get(url, headers=headers)\n              existing_secret = json.loads(response.text)\n          \n              # Расшифровка существующего значения\n              from cryptography.fernet import Fernet\n              fernet = Fernet(key_id.encode())\n              existing_value = fernet.decrypt(existing_secret['encrypted_value'].encode()).decode()\n          \n              # Увеличение значения на 1\n              new_value = str(int(existing_value) + 1)\n          \n              # Зашифровка нового значения\n              new_encrypted_value = fernet.encrypt(new_value.encode()).decode()\n          \n              # Обновление секрета с новым значением\n              url = f\"https://api.github.com/repos/{os.environ['GITHUB_REPOSITORY']}/actions/secrets/REPORT_NUMBER_2\"\n              payload = {\n                  \"encrypted_value\": new_encrypted_value,\n                  \"key_id\": key_id\n              }\n              response = requests.put(url, headers=headers, data=json.dumps(payload))\n          \n              print(f\"GitHub API response status code: {response.status_code}\")\n              print(f\"GitHub API response text: {response.text}\")\n          \n              if response.status_code == 204:\n                  print(\"Секрет успешно обновлен\")\n              else:\n                  print(f\"Ошибка обновления секрета: {response.status_code} - {response.text}\")\n          else:\n              print(f\"Ошибка: {response.status_code} - {response.text}\")\n\n\n      - name: Send Telegram Notification\n        env:\n          REPORT_NUMBER_2: ${{ steps.update_report_number_2.outputs.REPORT_NUMBER_2 }}\n        run: |\n          curl --location 'https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage' \\\n          --header 'Content-Type: application/json' \\\n          --data \"{\\\"chat_id\\\":5030902696,\\\"text\\\": \\\"Report_$REPORT_NUMBER_2 https://nikita159821.github.io/Anrex/\\\"}\"\n  \n        \n      \n        \n  \n  \n  \n\n  \n      \n  \n  \n  \n  \n      \n      \n\n  \n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.github/workflows/python-tests.yml b/.github/workflows/python-tests.yml
--- a/.github/workflows/python-tests.yml	(revision d10901313dfd33954945069178bf97a75a3d9f8e)
+++ b/.github/workflows/python-tests.yml	(date 1716551679008)
@@ -1,6 +1,6 @@
 on:
   push:
-  schedule: 
+  schedule:
     - cron: '0 * * * *'
 
 permissions:
@@ -110,60 +110,32 @@
           import requests
           import json
           import os
-          
-          # Получение списка ключей шифрования
-          url = f"https://api.github.com/repos/{os.environ['GITHUB_REPOSITORY']}/actions/secrets/public-keys"
+
+          # Вывод значения REPORT_NUMBER_2 перед обновлением
+          print(f"REPORT_NUMBER_2 value before update: {os.environ['REPORT_NUMBER_2']}")
+
+          # Обновление секрета
+          url = f"https://api.github.com/repos/{os.environ['GITHUB_REPOSITORY']}/actions/secrets/REPORT_NUMBER_2"
+          payload = {
+              "encrypted_value": "wtbo12EY4WLpuAQ+WOCc+l42hxp7OzPG9vZUwOgol3AGWjDMCvCl+2mF/GnmEDPdqA==",
+              "key_id": "3380204578043523366"
+          }
           headers = {
               'Accept': 'application/vnd.github+json',
               'Authorization': f'Bearer {os.environ["GITHUB_TOKEN"]}',
               'X-GitHub-Api-Version': '2022-11-28'
           }
-          response = requests.get(url, headers=headers)
-          
-          if response.status_code == 200:
-              keys = json.loads(response.text)['keys']
-              for key in keys:
-                  if key['name'] == 'REPORT_NUMBER_2':
-                      key_id = key['key_id']
-                      break
-              else:
-                  print("Ошибка: ключ шифрования для REPORT_NUMBER_2 не найден")
-                  exit(1)
-          
-              # Получение существующего значения секрета
-              url = f"https://api.github.com/repos/{os.environ['GITHUB_REPOSITORY']}/actions/secrets/REPORT_NUMBER_2"
-              response = requests.get(url, headers=headers)
-              existing_secret = json.loads(response.text)
-          
-              # Расшифровка существующего значения
-              from cryptography.fernet import Fernet
-              fernet = Fernet(key_id.encode())
-              existing_value = fernet.decrypt(existing_secret['encrypted_value'].encode()).decode()
-          
-              # Увеличение значения на 1
-              new_value = str(int(existing_value) + 1)
-          
-              # Зашифровка нового значения
-              new_encrypted_value = fernet.encrypt(new_value.encode()).decode()
-          
-              # Обновление секрета с новым значением
-              url = f"https://api.github.com/repos/{os.environ['GITHUB_REPOSITORY']}/actions/secrets/REPORT_NUMBER_2"
-              payload = {
-                  "encrypted_value": new_encrypted_value,
-                  "key_id": key_id
-              }
-              response = requests.put(url, headers=headers, data=json.dumps(payload))
-          
-              print(f"GitHub API response status code: {response.status_code}")
-              print(f"GitHub API response text: {response.text}")
-          
-              if response.status_code == 204:
-                  print("Секрет успешно обновлен")
-              else:
-                  print(f"Ошибка обновления секрета: {response.status_code} - {response.text}")
-          else:
-              print(f"Ошибка: {response.status_code} - {response.text}")
-
+
+          response = requests.post(url, headers=headers, data=json.dumps(payload))
+
+          # Вывод ответа от GitHub API
+          print(f"GitHub API response status code: {response.status_code}")
+          print(f"GitHub API response text: {response.text}")
+
+          if response.status_code == 204:
+              print("Секрет успешно обновлен")
+          else:
+              print(f"Ошибка обновления секрета: {response.status_code} - {response.text}")
 
       - name: Send Telegram Notification
         env:
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"a47df6a2-6f1d-4110-9779-55f759de9e58\" name=\"Changes\" comment=\"\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;nikita159821&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/nikita159821/Anrex.git&quot;,\n    &quot;accountId&quot;: &quot;a0cce2a1-622e-400e-b914-496262845ca9&quot;\n  }\n}</component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 2\n}</component>\n  <component name=\"ProjectId\" id=\"2g34t4PQiq0X53c4bVRjQgzZ0gR\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Python tests.Python tests for test_callback_link.TestCallbackLink.test_callback_link.executor\": \"Run\",\n    \"Python tests.Python tests for test_callback_popup_name_input.TestInputName.test_callback_popup_name_input.executor\": \"Run\",\n    \"Python tests.Python tests for test_callback_popup_phone_input.TestInputPhone.test_callback_popup_phone_input.executor\": \"Run\",\n    \"Python tests.Python tests for test_callback_popup_title.TestPopupTitle.test_callback_popup_title.executor\": \"Run\",\n    \"Python tests.Python tests for test_close_popup.TestClosePopup.executor\": \"Run\",\n    \"Python tests.Python tests for test_close_popup.TestClosePopup.test_close_popup.executor\": \"Run\",\n    \"Python tests.Python tests for test_close_popup_city.TestClosePopup.test_close_popup.executor\": \"Run\",\n    \"Python tests.Python tests for test_close_popup_city_overlay.TestClosePopupOverlay.test_close_popup_city_overlay.executor\": \"Run\",\n    \"Python tests.Python tests for test_first_city_is_chelyabinsk.TestCityIsChelyabinsk.test_close_popup_city_overlay.executor\": \"Run\",\n    \"Python tests.Python tests for test_first_city_is_chelyabinsk.TestCityIsChelyabinsk.test_first_city_is_chelyabinsk.executor\": \"Run\",\n    \"Python tests.Python tests for test_hover.TestHover.test_hover.executor\": \"Run\",\n    \"Python tests.Python tests for test_name_input_placeholder.TestInputNamePlaceholder.test_name_input_placeholder.executor\": \"Run\",\n    \"Python tests.Python tests for test_name_input_send_keys.TestNameInputSendKeys.test_name_input_send_keys.executor\": \"Run\",\n    \"Python tests.Python tests for test_phone_input_placeholder.TestInputPhonePlaceholder.test_phone_input_placeholder.executor\": \"Run\",\n    \"Python tests.Python tests for test_title_back_call.TestTitle.test_title_back_call.executor\": \"Run\",\n    \"Python tests.Python tests for test_title_city.TestCity.executor\": \"Run\",\n    \"Python tests.pytest for fasfasf.TestBonusService.test_calculate_bonus_with_zero_productivity.executor\": \"Run\",\n    \"Python tests.pytest for safasf.test_calculate_commission.executor\": \"Run\",\n    \"Python tests.pytest for test_close_popup_city.TestClosePopup.test_close_popup.executor\": \"Run\",\n    \"Python tests.pytest for test_close_popup_city_overlay.TestClosePopupOverlay.test_close_popup_city_overlay.executor\": \"Run\",\n    \"Python tests.pytest for test_header_basket.TestHeaderBasket.executor\": \"Run\",\n    \"Python tests.pytest for test_header_basket.TestHeaderBasket.test_basket_count_displayed_after_adding_product.executor\": \"Run\",\n    \"Python tests.pytest for test_header_basket.TestHeaderBasket.test_header_displays_basket.executor\": \"Run\",\n    \"Python tests.pytest for test_header_sale.TestHeaderSale.executor\": \"Run\",\n    \"Python tests.pytest for test_header_search.TestDisplaysSearch.executor\": \"Run\",\n    \"Python tests.pytest for test_header_search.TestDisplaysSearch.test_header_displays_search.executor\": \"Run\",\n    \"Python tests.pytest for test_header_search.TestDisplaysSearch.test_search_click.executor\": \"Run\",\n    \"Python tests.pytest for test_header_search.TestDisplaysSearch.test_search_click_close.executor\": \"Run\",\n    \"Python tests.pytest for test_homepage_sections_slider.TestSectionSlider.executor\": \"Run\",\n    \"Python tests.pytest for test_homepage_sections_slider.TestSectionSlider.test_homepage_sections_slider.executor\": \"Run\",\n    \"Python tests.pytest for test_logo_footer_anrex_.TestLogoFooter.test_logo_footer.executor\": \"Run\",\n    \"Python tests.pytest for test_name_input_form_feedback_send_keys.TestNameInputSendKeys.test_negative_name_input_form_feedback_send_keys.executor\": \"Run\",\n    \"Python tests.pytest for test_name_input_send_keys.TestNameInputSendKeys.test_negative_name_input_send_keys.executor\": \"Run\",\n    \"Python tests.pytest for test_phone_input_form_feedback_send_keys.TestPhoneInputSendKeys.test_negative_phone_form_feedback_input_send_keys.executor\": \"Run\",\n    \"Python tests.pytest for test_phone_input_send_keys.TestPhoneInputSendKeys.executor\": \"Run\",\n    \"Python tests.pytest for test_phone_input_send_keys.TestPhoneInputSendKeys.test_negative_phone_input_send_keys.executor\": \"Run\",\n    \"Python tests.pytest for test_phone_input_send_keys.TestPhoneInputSendKeys.test_negative_phone_input_send_keys_12_digits.executor\": \"Run\",\n    \"Python tests.pytest for test_phone_input_send_keys.TestPhoneInputSendKeys.test_phone_input_delete_send_keys.executor\": \"Run\",\n    \"Python tests.pytest for test_phone_input_send_keys.TestPhoneInputSendKeys.test_positive_phone_input_send_keys.executor\": \"Run\",\n    \"Python tests.pytest for test_popup_city.TestPopup.test_popup_city.executor\": \"Run\",\n    \"Python tests.pytest for test_redirect_to_beds_section.TestRedirectBedsSection.executor\": \"Run\",\n    \"Python tests.pytest for test_redirect_to_beds_section.TestRedirectBedsSection.test_redirect_krovati_i_matrasi.executor\": \"Run\",\n    \"Python tests.pytest for test_request_callback.TestCallbackRequestTests.executor\": \"Run\",\n    \"Python tests.pytest for test_text_comment_footer.TestCommentFooter.executor\": \"Run\",\n    \"Python tests.pytest for test_title_back_call.TestTitle.executor\": \"Run\",\n    \"Python tests.pytest for test_title_city.TestCity.test_title_city.executor\": \"Run\",\n    \"Python.safasf.executor\": \"Run\",\n    \"Python.пывпвы.executor\": \"Run\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"git-widget-placeholder\": \"develop\",\n    \"last_opened_file_path\": \"/home/nikita/PycharmProjects/Anrex\"\n  }\n}]]></component>\n  <component name=\"RunManager\" selected=\"Python.пывпвы\">\n    <configuration name=\"пывпвы\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Anrex\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/пывпвы.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"pytest for test_discounted_products.TestDiscountedProducts.test_discounted_products\" type=\"tests\" factoryName=\"py.test\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Anrex\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"_new_keywords\" value=\"&quot;&quot;\" />\n      <option name=\"_new_parameters\" value=\"&quot;&quot;\" />\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\n      <option name=\"_new_target\" value=\"&quot;test_discounted_products.TestDiscountedProducts.test_discounted_products&quot;\" />\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"pytest for test_homepage_sections_slider.TestSectionSlider\" type=\"tests\" factoryName=\"py.test\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Anrex\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"_new_keywords\" value=\"&quot;&quot;\" />\n      <option name=\"_new_parameters\" value=\"&quot;&quot;\" />\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\n      <option name=\"_new_target\" value=\"&quot;test_homepage_sections_slider.TestSectionSlider&quot;\" />\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"pytest for test_homepage_sections_slider.TestSectionSlider.test_homepage_sections_slider\" type=\"tests\" factoryName=\"py.test\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Anrex\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"_new_keywords\" value=\"&quot;&quot;\" />\n      <option name=\"_new_parameters\" value=\"&quot;&quot;\" />\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\n      <option name=\"_new_target\" value=\"&quot;test_homepage_sections_slider.TestSectionSlider.test_homepage_sections_slider&quot;\" />\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"pytest for test_logo_footer_anrex_.TestLogoFooter.test_logo_footer\" type=\"tests\" factoryName=\"py.test\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Anrex\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"_new_keywords\" value=\"&quot;&quot;\" />\n      <option name=\"_new_parameters\" value=\"&quot;&quot;\" />\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\n      <option name=\"_new_target\" value=\"&quot;test_logo_footer_anrex_.TestLogoFooter.test_logo_footer&quot;\" />\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Python.пывпвы\" />\n        <item itemvalue=\"Python tests.pytest for test_logo_footer_anrex_.TestLogoFooter.test_logo_footer\" />\n        <item itemvalue=\"Python tests.pytest for test_homepage_sections_slider.TestSectionSlider.test_homepage_sections_slider\" />\n        <item itemvalue=\"Python tests.pytest for test_homepage_sections_slider.TestSectionSlider\" />\n        <item itemvalue=\"Python tests.pytest for test_discounted_products.TestDiscountedProducts.test_discounted_products\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-python-sdk-0509580d9d50-746f403e7f0c-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-241.14494.241\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"a47df6a2-6f1d-4110-9779-55f759de9e58\" name=\"Changes\" comment=\"\" />\n      <created>1714913138832</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1714913138832</updated>\n    </task>\n    <servers />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision d10901313dfd33954945069178bf97a75a3d9f8e)
+++ b/.idea/workspace.xml	(date 1716558422919)
@@ -4,7 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="a47df6a2-6f1d-4110-9779-55f759de9e58" name="Changes" comment="" />
+    <list default="true" id="a47df6a2-6f1d-4110-9779-55f759de9e58" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.github/workflows/python-tests.yml" beforeDir="false" afterPath="$PROJECT_DIR$/.github/workflows/python-tests.yml" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />

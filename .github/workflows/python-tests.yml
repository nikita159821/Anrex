on:
  push:
  schedule:
    - cron: '0 * * * *'

permissions:
  contents: read
  pages: write
  id-token: write

jobs:

  download-history:
    runs-on: ubuntu-latest
    name: Скачивание истории
    steps:
      - name: Установка Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - run: |
          ARTIFACT_LIST=$(curl -L -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version:2022-11-28" \
          "https://api.github.com/repos/nikita159821/Anrex/actions/artifacts?per_page=1&page=1" \
          | python3 -c "import sys, json; print(','.join([str(artifact['id']) for artifact in json.load(sys.stdin)['artifacts']]));")
          
          for ARTIFACT_ID in $(echo $ARTIFACT_LIST | tr ',' '\n'); do
            curl -L -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            -H "X-GitHub-Api-Version:2022-11-28" \
            https://api.github.com/repos/nikita159821/Anrex/actions/artifacts/$ARTIFACT_ID/zip \
            -o $ARTIFACT_ID.zip
            unzip -o -j $ARTIFACT_ID.zip -d "allure results"
            rm $ARTIFACT_ID.zip
          done
      - name: Cleanup old artifacts
        run: |
          rm -rf allure-results/*
      - name: Сохранение истории Allure
        uses: actions/upload-artifact@v3
        with:
          name: allure-results
          path: allure results
          retention-days: 1


  test:
    runs-on: ubuntu-latest
    needs: download-history
    name: Запуск тестов
    steps:
      - name: Install Selenium
        run: pip install selenium
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install Chrome
        run: sudo apt-get install google-chrome-stable
      - name: install dependencies
        run: pip install -r requirements.txt
      - name: Download all workflow run artifact
        uses: actions/download-artifact@v3
      - name: Cleanup old artifacts
        run: |
          rm -rf allure-results/*
      - name: Run tests
        run: pytest tests/test_title_city.py --alluredir=allure-results
        continue-on-error: true
      - name: Store allure results
        uses: actions/upload-artifact@v3
        with:
          name: allure-results
          path: allure-results
          retention-days: 1


  generate-report:
    runs-on: ubuntu-latest
    needs: test
    name: Генерация отчета
    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '17'
      - run: sudo wget https://github.com/allure-framework/allure2/releases/download/2.23.1/allure-2.23.1.tgz && sudo tar -zxvf allure-2.23.1.tgz -C /opt/ && sudo ln -s /opt/allure-2.23.1/bin/allure /usr/bin/allure
      - name: Скачивание артефактов
        uses: actions/download-artifact@v3
      - run: allure generate -c allure-results -o _site
      - name: Сохранение ссылки на отчет
        run: |
          echo "REPORT_URL=https://nikita159821.github.io/Anrex/" >> $GITHUB_OUTPUT
      - name: Сохранение сгенерированного отчета
        uses: actions/upload-artifact@v3
        with:
          name: _site
          path:
            _site
          retention-days: 1


  publish-report:
    runs-on: ubuntu-latest
    needs: generate-report
    name: Публикация и отправка
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1.2.9
      - name: Update Report Number
        id: update_report_number_2
        env:
          REPORT_NUMBER_2: ${{ secrets.REPORT_NUMBER_2 }}
        run: |
          REPORT_NUMBER_2=$((REPORT_NUMBER_2 + 1))
          echo "REPORT_NUMBER_2=$REPORT_NUMBER_2" >> $GITHUB_OUTPUT
          echo "REPORT_NUMBER=$REPORT_NUMBER_2" >> $GITHUB_STEP_SUMMARY
          echo "REPORT_NUMBER_2=$REPORT_NUMBER_2" >> $GITHUB_ENV
          echo "Current REPORT_NUMBER_2 value before update: $REPORT_NUMBER_2"

          # Обновленное значение
          REPORT_NUMBER_2=$((REPORT_NUMBER_2))
          echo "Current REPORT_NUMBER_2 value after update: $REPORT_NUMBER_2"

      - name: Setup GitHub CLI
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: pip install requests cryptography

      - name: Update REPORT_NUMBER_2 Secret
        env:
          REPORT_NUMBER_2: ${{ steps.update_report_number_2.outputs.REPORT_NUMBER_2 }}
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        shell: python
        run: |
          import requests
          import json
          import os
          
          # Получение списка ключей шифрования
          url = f"https://api.github.com/repos/{os.environ['GITHUB_REPOSITORY']}/actions/secrets/public-keys"
          headers = {
              'Accept': 'application/vnd.github+json',
              'Authorization': f'Bearer {os.environ["GITHUB_TOKEN"]}',
              'X-GitHub-Api-Version': '2022-11-28'
          }
          response = requests.get(url, headers=headers)
          
          if response.status_code == 200:
              keys = json.loads(response.text)['keys']
              for key in keys:
                  if key['name'] == 'REPORT_NUMBER_2':
                      key_id = key['key_id']
                      break
              else:
                  print("Ошибка: ключ шифрования для REPORT_NUMBER_2 не найден")
                  exit(1)
          
              # Получение существующего значения секрета
              url = f"https://api.github.com/repos/{os.environ['GITHUB_REPOSITORY']}/actions/secrets/REPORT_NUMBER_2"
              response = requests.get(url, headers=headers)
              existing_secret = json.loads(response.text)
          
              # Расшифровка существующего значения
              from cryptography.fernet import Fernet
              fernet = Fernet(key_id.encode())
              existing_value = fernet.decrypt(existing_secret['encrypted_value'].encode()).decode()
          
              # Увеличение значения на 1
              new_value = str(int(existing_value) + 1)
          
              # Зашифровка нового значения
              new_encrypted_value = fernet.encrypt(new_value.encode()).decode()
          
              # Обновление секрета с новым значением
              payload = {
                  "encrypted_value": new_encrypted_value,
                  "key_id": key_id
              }
              response = requests.put(url, headers=headers, data=json.dumps(payload))
          
              print(f"GitHub API response status code: {response.status_code}")
              print(f"GitHub API response text: {response.text}")
              print(f"REPORT_NUMBER_2 value after update: {os.environ['REPORT_NUMBER_2']}")
          
              if response.status_code == 204:
                  print("Секрет успешно обновлен")
              else:
                  print(f"Ошибка обновления секрета: {response.status_code} - {response.text}")
          else:
              print(f"Ошибка: {response.status_code} - {response.text}")


      - name: Send Telegram Notification
        env:
          REPORT_NUMBER_2: ${{ steps.update_report_number_2.outputs.REPORT_NUMBER_2 }}
        run: |
          curl --location 'https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage' \
          --header 'Content-Type: application/json' \
          --data "{\"chat_id\":5030902696,\"text\": \"Report_$REPORT_NUMBER_2 https://nikita159821.github.io/Anrex/\"}"

  
        
      
        
  
  
  
  
  
      
  
  
  
  
      
      

  
